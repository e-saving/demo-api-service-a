name: Build Pipeline to Dev

on:          
  push:
    branches: [ develop ]
    paths-ignore:
      - '.github/**'
      - 'badges/*'
      - 'pom.xml'
      - '*.svg'
      - '*.json'
      - '*.md'
  workflow_dispatch:
  
env:
  #default is develop
  SOURCECODE_MANAGE_BRANCH: main 

  GITLAB_REPO: git.g-able.com/ais-esaving/service-a.git
  GITLAB_HOME_PATH: service-a
  
  POM_VERSION_LINE_NUMBER: 13
  
  DOCKER_IMAGE_NAME: api-demo-service-a
  
  GITOPS_MANAGE_BRANCH: develop
  GITOPS_MANAGE_HOME_PATH: api-demo-service-a
  
  
jobs:
  generate-version:
    runs-on: ubuntu-latest
    environment: develop
    
    steps:
      - name: Checkout GitOps Repo
        uses: actions/checkout@v2.4.0
        with:
          repository: ${{ secrets.GITOPS_REPO_DEV }}
          ref: ${{ env.GITOPS_MANAGE_BRANCH }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: manage_gitops
      
      - name: Geneate new Build Number
        run: |
            cd manage_gitops/${{ env.GITOPS_MANAGE_HOME_PATH }}
            cur_build_number=$(cat version_control.txt|grep '^BUILD_VERSION'|awk -F'=' '{print($2)}')
            echo "cur_build_number=${cur_build_number}"
            ((new_build_number=cur_build_number+1))
            echo "new_build_number=${new_build_number}"
            echo "BUILD_VERSION=${new_build_number}" > version_control.txt
            echo "BUILD_VERSION=${new_build_number} " >> $GITHUB_ENV

      - name: Checkout Source Code
        run: |
            git clone https://${{ secrets.GITLAB_USERNAME }}:${{ secrets.GITLAB_TOKEN }}@${{ env.GITLAB_REPO }}
            cd ${{ env.GITLAB_HOME_PATH }}
            git switch ${{ env.SOURCECODE_MANAGE_BRANCH }}
                      
      - name: Generate new version
        run: |
            cd ${{ env.GITLAB_HOME_PATH }}
            pom_version=$(head -${{ env.POM_VERSION_LINE_NUMBER }} pom.xml|tail -1|grep -oPm1 "(?<=<version>)[^<]+")
            echo "pom_version=${pom_version}"
            echo "POM_VERSION=${pom_version}" >> ../manage_gitops/${{ env.GITOPS_MANAGE_HOME_PATH }}/version_control.txt
            new_image_version="${pom_version}-${{ env.BUILD_VERSION }}"
            echo "new_image_version=${new_image_version}"
            echo "IMAGE_VERSION=${new_image_version}" >> ../manage_gitops/${{ env.GITOPS_MANAGE_HOME_PATH }}/version_control.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v1
        with:
          name: version
          path: manage_gitops/${{ env.GITOPS_MANAGE_HOME_PATH }}/version_control.txt   

  build-container:
    runs-on: ubuntu-latest    
    needs: [generate-version]
    environment: develop
    
    steps:    
      - name: Checkout Source Code
        run: |
            git clone https://${{ secrets.GITLAB_USERNAME }}:${{ secrets.GITLAB_TOKEN }}@${{ env.GITLAB_REPO }}
            cd ${{ env.GITLAB_HOME_PATH }}
            git switch ${{ env.SOURCECODE_MANAGE_BRANCH }}
          
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: Download version artifact
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Check version number
        run: |
          img_version=$(cat version/version_control.txt|grep '^IMAGE_VERSION'|awk -F'=' '{print($2)}')
          echo "img_version is ${img_version}"
          echo "IMAGE_VERSION=${img_version} " >> $GITHUB_ENV
          
      - name: Build with Maven
        run: |
            cd ${{ env.GITLAB_HOME_PATH }}            
            #mkdir -p badges
            #mvn package -Pcoverage
            mvn package            
            #ls -l badges
            ls -l target
            #ls -l target/site/jacoco/
          
      - name: Scan Source Code Quality (SonarQube)
        run: |
            cd ${{ env.GITLAB_HOME_PATH }}
            mvn sonar:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      
      - name: Check Code Quality Gate (SonarQube)
        uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: ${{ env.GITLAB_HOME_PATH }}/target/sonar/report-task.txt
            
      - name: Log in to Azure Container Registry (ACR)
        uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.ACR_DEV_REGISTRY_SERVER }}
            username: ${{ secrets.ACR_DEV_USERNAME }}
            password: ${{ secrets.ACR_DEV_PASSWORD }}

      - name: Build and Push Container Image (ACR)
        run: |
            cd ${{ env.GITLAB_HOME_PATH }}
            ls -l
            docker build . -t ${{ secrets.ACR_DEV_REGISTRY_SERVER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
            docker push ${{ secrets.ACR_DEV_REGISTRY_SERVER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          
      - name: Security Scan Container Image (Anchore)
        uses: anchore/scan-action@b08527d5ae7f7dc76f9621edb6e49eaf47933ccd
        with:
          image: "${{ secrets.ACR_DEV_REGISTRY_SERVER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_VERSION }}"
          # Generate a SARIF report and set the `sarif` output parameter after successful action execution.  This report is compatible with GitHub Automated Code Scanning (ACS), as the artifact to upload for display as a Code Scanning Alert report.
          acs-report-enable: true
          # Set this to any value to enable verbose debug output
          #debug: # optional, default is false
          # Set to false to avoid failing based on severity-cutoff. Default is to fail when severity-cutoff is reached (or surpassed)
          fail-build: false # optional, default is true      
          # Optionally specify the minimum vulnerability severity to trigger an "error" level ACS result.  Valid choices are "negligible", "low", "medium", "high" and "critical".  Any vulnerability with a severity less than this value will lead to a "warning" result.  Default is "medium".
          severity-cutoff: critical # optional, default is medium

      - name: Upload Container Image Scan Report (Anchore)
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
          
  update-gitops-repo:
    runs-on: ubuntu-latest    
    needs: [build-container]
    environment: develop
    
    steps:          
      - name: Download version artifact
        uses: actions/download-artifact@v1
        with:
          name: version
          
      - name: Check version number
        run: |
          img_version=$(cat version/version_control.txt|grep '^IMAGE_VERSION'|awk -F'=' '{print($2)}')
          echo "img_version is ${img_version}"
          echo "IMAGE_VERSION=${img_version} " >> $GITHUB_ENV
          
      - name: Checkout GitOps Repo
        uses: actions/checkout@v2.4.0
        with:
          repository: ${{ secrets.GITOPS_REPO_DEV }}
          ref: ${{ env.GITOPS_MANAGE_BRANCH }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: manage_gitops

      - name: Update deployment configuration (Helm)
        run: |             
            cd manage_gitops/${{ env.GITOPS_MANAGE_HOME_PATH }}            
            image_repo=$(cat values.yaml|grep image|awk -F' ' '{print($2)}')
            acr_val=$(echo $image_repo|awk -F'/' '{print($1)}')
            image_val=$(echo $image_repo|awk -F'/' '{print($2)}')
            image_name=$(echo $image_val|awk -F':' '{print($1)}')
            image_tag=$(echo $image_val|awk -F':' '{print($2)}')
            echo "acr_val=${acr_val}"
            echo "image_val=${image_val}"
            echo "image_name=${image_name}"
            echo "image_tag=${image_tag}"
            new_image_val="${image_name}:${{ env.IMAGE_VERSION }}"
            new_acr_val="${{ secrets.ACR_DEV_REGISTRY_SERVER }}"
            sed -i "s/${image_val}/${new_image_val}/g" values.yaml
            sed -i "s/${acr_val}/${new_acr_val}/g" values.yaml
            
      - name: Verify updated deployment configuration (Helm)
        run: | 
            cd manage_gitops/${{ env.GITOPS_MANAGE_HOME_PATH }}            
            image_repo=$(cat values.yaml|grep image|awk -F' ' '{print($2)}')
            acr_val=$(echo $image_repo|awk -F'/' '{print($1)}')
            image_val=$(echo $image_repo|awk -F'/' '{print($2)}')
            image_name=$(echo $image_val|awk -F':' '{print($1)}')
            image_tag=$(echo $image_val|awk -F':' '{print($2)}')
            echo "acr_val=${acr_val}"
            echo "image_val=${image_val}"
            echo "image_name=${image_name}"
            echo "image_tag=${image_tag}"
         
      - name: Commit and push deployment configuration (Helm)
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.GITOPS_TOKEN }}
        with:
          source_file: "manage_gitops/${{ env.GITOPS_MANAGE_HOME_PATH }}/values.yaml"
          destination_repo: ${{ env.GITOPS_REPO_DEV }}
          destination_folder: ${{ env.GITOPS_MANAGE_HOME_PATH }}
          destination_branch: ${{ env.GITOPS_MANAGE_BRANCH }}
          user_email: 'github_actions@g-able.com'
          user_name: 'github_actions'
          commit_message: 'Update new container image version ${{ env.IMAGE_VERSION }} of ${{ env.GITOPS_MANAGE_HOME_PATH }}/values.yaml'
